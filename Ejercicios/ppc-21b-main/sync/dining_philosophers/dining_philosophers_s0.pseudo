// Problem formulation
/*
• Only one philosopher can hold a fork at a time.
• NO It must be impossible for a deadlock to occur.
• NO It must be impossible for a philosopher to starve waiting for a fork.
• NO It must be possible for more than one philosopher to eat at the same time.
*/
// Does not prevent deadlock

main:
	shared NUM_PHILOS = 5 
	shared semaphore[] fork = { 1, 1, 1, 1, 1 }
	for i in range(NUM_PHILOS) 
		create_thread(philosopher(i)

philosopher(int i):
	While (true)
		// think for a bounded amount of time
		think()	
		// prior to eat, the philosopher must acquire both  right and left forks
		get_forks(i)
		// each for a bounded amount of time
		eat()
		// release the forks so that another philosoper can eat
		put_forks(i)

right(int i): 
	return i

left(int i): 
	return (i + 1) % NUM_PHILOS

get_forks(int i):
	wait(fork[right(i)])
	wait(fork[left(i)])

put_forks(int i):
	signal(fork[right(i)])
	signal(fork[left(i)])




























--> Produces a deadlock with 5 philosophers (illustrate with resource allocation diagrama)
https://www.youtube.com/watch?v=_ruovgwXyYs 7:22 


