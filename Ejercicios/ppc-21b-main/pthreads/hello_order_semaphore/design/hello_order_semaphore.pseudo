// Indeterminism
procedure main(argc, argv[])
  shared thread_count := SYSTEM(CPUs)
  if(argc > 1)
    thread_count := integer(argv[1])

  //shared can_greet as array of thread_count semaphores
  shared can_greet as Semaphore[thread_count]
  create_threads(thread_count)
end procedure


procedure create_threads(thread_count)
  // Must be dynamic memory
  threads[thread_count]
  for thread_number := 0 to thread_count do
    // can_greet[thread_number] := Semaphore(not thread_number)
    can_greet[thread_number] := create_semaphore(not thread_number)
    threads[thread_number] := create_thread(greet, thread_number)
  end for
  //print("Hello from main thread")
  for thread_number := 0 to thread_count do
    join(threads[thread_number])
  end for
end procedure 

procedure greet(thread_number)
  wait(can_greet[thread_number])
    print("Hello from secondary thread ", thread_number, " of ", thread_count)
  signal(can_greet[(thread_number + 1) mod thread_count])
end procedure
