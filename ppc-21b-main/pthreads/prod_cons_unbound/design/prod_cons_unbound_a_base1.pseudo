procedure main(argc, argv[]):
  if argc = 8 then
    shared unit_count := integer(argv[1])
    shared producer_count := integer(argv[2])
    shared consumer_count := integer(argv[3])
    shared producer_min_delay := integer(argv[4])
    shared producer_max_delay := integer(argv[5])
    shared consumer_min_delay := integer(argv[6])
    shared consumer_max_delay := integer(argv[7])

    shared queue := create_integer_queue()
    shared can_access_queue := create_mutex()

    shared next_unit := 0
    shared can_access_next_unit := create_mutex()

    shared consumed_count := 0
    shared can_access_consumed_count := create_mutex()

    declare producers := create_threads(producer_count, produce)
    declare consumers := create_threads(consumer_count, consume)

    shared can_consume := create_semaphore(0)

    join_threads(producers)
    join_threads(consumers)
  end if
end procedure



procedure produce:
  while true do
    declare my_unit := 0
    // ?
    if next_unit < unit_count then
      next_unit := next_unit + 1
      my_unit := next_unit
    else
      // ?
      break while
    end if
    // ? 
  
    delay(random_between(producer_min_delay, producer_max_delay))
    // ?
    enqueue(queue, my_unit)
    // ?
    print("Produced ", my_unit)
    signal(can_consume)
  end while
end procedure

procedure consume:
  while true do
    // ?
    if consumed_count < unit_count then
      consumed_count := consumed_count + 1
    else
      // ?
      break while
    end if
    // ?

    wait(can_consume)
    // ?
    declare my_unit := dequeue(queue)
    // ? 
    print("\tConsuming ", my_unit)
    delay(random_between(consumer_min_delay, consumer_max_delay))
  end while
end procedure

function random_between(min, max):
  return min + rand() % (max - min)
end function


/*
procedure produce0:
  declare my_unit := 0
  // ? 
  declare is_there_pending_work := next_unit < unit_count
  if is_there_pending_work then
    next_unit := next_unit + 1
    my_unit := next_unit
  end if
  // ? 

  while is_there_pending_work do
    delay(random_between(producer_min_delay, producer_max_delay))
    // ?
    enqueue(queue, my_unit)
    // ?
    print("Produced ", my_unit)

    // ?
    is_there_pending_work := next_unit < unit_count
    if is_there_pending_work then
      next_unit := next_unit + 1
      my_unit := next_unit
    end if
    // ?
  end while
end procedure
*/